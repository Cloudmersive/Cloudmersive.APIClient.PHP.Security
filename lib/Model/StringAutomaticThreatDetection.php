<?php
/**
 * StringAutomaticThreatDetection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * securityapi
 *
 * The security APIs help you detect and block security threats.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StringAutomaticThreatDetection Class Doc Comment
 *
 * @category Class
 * @description Result of performing an Insecure Deserialization JSON protection operation
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StringAutomaticThreatDetection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StringAutomaticThreatDetection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'successful' => 'bool',
        'clean_result' => 'bool',
        'contained_json_insecure_deserialization_attack' => 'bool',
        'contained_xss_threat' => 'bool',
        'contained_xxe_threat' => 'bool',
        'contained_sql_injection_threat' => 'bool',
        'contained_ssrf_threat' => 'bool',
        'is_xml' => 'bool',
        'is_json' => 'bool',
        'is_url' => 'bool',
        'original_input' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'successful' => null,
        'clean_result' => null,
        'contained_json_insecure_deserialization_attack' => null,
        'contained_xss_threat' => null,
        'contained_xxe_threat' => null,
        'contained_sql_injection_threat' => null,
        'contained_ssrf_threat' => null,
        'is_xml' => null,
        'is_json' => null,
        'is_url' => null,
        'original_input' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'successful' => 'Successful',
        'clean_result' => 'CleanResult',
        'contained_json_insecure_deserialization_attack' => 'ContainedJsonInsecureDeserializationAttack',
        'contained_xss_threat' => 'ContainedXssThreat',
        'contained_xxe_threat' => 'ContainedXxeThreat',
        'contained_sql_injection_threat' => 'ContainedSqlInjectionThreat',
        'contained_ssrf_threat' => 'ContainedSsrfThreat',
        'is_xml' => 'IsXML',
        'is_json' => 'IsJSON',
        'is_url' => 'IsURL',
        'original_input' => 'OriginalInput'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'successful' => 'setSuccessful',
        'clean_result' => 'setCleanResult',
        'contained_json_insecure_deserialization_attack' => 'setContainedJsonInsecureDeserializationAttack',
        'contained_xss_threat' => 'setContainedXssThreat',
        'contained_xxe_threat' => 'setContainedXxeThreat',
        'contained_sql_injection_threat' => 'setContainedSqlInjectionThreat',
        'contained_ssrf_threat' => 'setContainedSsrfThreat',
        'is_xml' => 'setIsXml',
        'is_json' => 'setIsJson',
        'is_url' => 'setIsUrl',
        'original_input' => 'setOriginalInput'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'successful' => 'getSuccessful',
        'clean_result' => 'getCleanResult',
        'contained_json_insecure_deserialization_attack' => 'getContainedJsonInsecureDeserializationAttack',
        'contained_xss_threat' => 'getContainedXssThreat',
        'contained_xxe_threat' => 'getContainedXxeThreat',
        'contained_sql_injection_threat' => 'getContainedSqlInjectionThreat',
        'contained_ssrf_threat' => 'getContainedSsrfThreat',
        'is_xml' => 'getIsXml',
        'is_json' => 'getIsJson',
        'is_url' => 'getIsUrl',
        'original_input' => 'getOriginalInput'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['successful'] = isset($data['successful']) ? $data['successful'] : null;
        $this->container['clean_result'] = isset($data['clean_result']) ? $data['clean_result'] : null;
        $this->container['contained_json_insecure_deserialization_attack'] = isset($data['contained_json_insecure_deserialization_attack']) ? $data['contained_json_insecure_deserialization_attack'] : null;
        $this->container['contained_xss_threat'] = isset($data['contained_xss_threat']) ? $data['contained_xss_threat'] : null;
        $this->container['contained_xxe_threat'] = isset($data['contained_xxe_threat']) ? $data['contained_xxe_threat'] : null;
        $this->container['contained_sql_injection_threat'] = isset($data['contained_sql_injection_threat']) ? $data['contained_sql_injection_threat'] : null;
        $this->container['contained_ssrf_threat'] = isset($data['contained_ssrf_threat']) ? $data['contained_ssrf_threat'] : null;
        $this->container['is_xml'] = isset($data['is_xml']) ? $data['is_xml'] : null;
        $this->container['is_json'] = isset($data['is_json']) ? $data['is_json'] : null;
        $this->container['is_url'] = isset($data['is_url']) ? $data['is_url'] : null;
        $this->container['original_input'] = isset($data['original_input']) ? $data['original_input'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets successful
     *
     * @return bool
     */
    public function getSuccessful()
    {
        return $this->container['successful'];
    }

    /**
     * Sets successful
     *
     * @param bool $successful True if the operation was successful, false otherwise
     *
     * @return $this
     */
    public function setSuccessful($successful)
    {
        $this->container['successful'] = $successful;

        return $this;
    }

    /**
     * Gets clean_result
     *
     * @return bool
     */
    public function getCleanResult()
    {
        return $this->container['clean_result'];
    }

    /**
     * Sets clean_result
     *
     * @param bool $clean_result clean_result
     *
     * @return $this
     */
    public function setCleanResult($clean_result)
    {
        $this->container['clean_result'] = $clean_result;

        return $this;
    }

    /**
     * Gets contained_json_insecure_deserialization_attack
     *
     * @return bool
     */
    public function getContainedJsonInsecureDeserializationAttack()
    {
        return $this->container['contained_json_insecure_deserialization_attack'];
    }

    /**
     * Sets contained_json_insecure_deserialization_attack
     *
     * @param bool $contained_json_insecure_deserialization_attack True if the input contained Insecure Deserialization JSON, false otherwise
     *
     * @return $this
     */
    public function setContainedJsonInsecureDeserializationAttack($contained_json_insecure_deserialization_attack)
    {
        $this->container['contained_json_insecure_deserialization_attack'] = $contained_json_insecure_deserialization_attack;

        return $this;
    }

    /**
     * Gets contained_xss_threat
     *
     * @return bool
     */
    public function getContainedXssThreat()
    {
        return $this->container['contained_xss_threat'];
    }

    /**
     * Sets contained_xss_threat
     *
     * @param bool $contained_xss_threat True if the input contained XSS attack, false otherwise
     *
     * @return $this
     */
    public function setContainedXssThreat($contained_xss_threat)
    {
        $this->container['contained_xss_threat'] = $contained_xss_threat;

        return $this;
    }

    /**
     * Gets contained_xxe_threat
     *
     * @return bool
     */
    public function getContainedXxeThreat()
    {
        return $this->container['contained_xxe_threat'];
    }

    /**
     * Sets contained_xxe_threat
     *
     * @param bool $contained_xxe_threat True if the input contained XXE attack, false otherwise
     *
     * @return $this
     */
    public function setContainedXxeThreat($contained_xxe_threat)
    {
        $this->container['contained_xxe_threat'] = $contained_xxe_threat;

        return $this;
    }

    /**
     * Gets contained_sql_injection_threat
     *
     * @return bool
     */
    public function getContainedSqlInjectionThreat()
    {
        return $this->container['contained_sql_injection_threat'];
    }

    /**
     * Sets contained_sql_injection_threat
     *
     * @param bool $contained_sql_injection_threat True if the input contained SQL Injection attack, false otherwise
     *
     * @return $this
     */
    public function setContainedSqlInjectionThreat($contained_sql_injection_threat)
    {
        $this->container['contained_sql_injection_threat'] = $contained_sql_injection_threat;

        return $this;
    }

    /**
     * Gets contained_ssrf_threat
     *
     * @return bool
     */
    public function getContainedSsrfThreat()
    {
        return $this->container['contained_ssrf_threat'];
    }

    /**
     * Sets contained_ssrf_threat
     *
     * @param bool $contained_ssrf_threat True if the input contained an Server-Side Request Forgery (SSRF) URL attack, false otherwise
     *
     * @return $this
     */
    public function setContainedSsrfThreat($contained_ssrf_threat)
    {
        $this->container['contained_ssrf_threat'] = $contained_ssrf_threat;

        return $this;
    }

    /**
     * Gets is_xml
     *
     * @return bool
     */
    public function getIsXml()
    {
        return $this->container['is_xml'];
    }

    /**
     * Sets is_xml
     *
     * @param bool $is_xml True if the input string is XML, false otherwise
     *
     * @return $this
     */
    public function setIsXml($is_xml)
    {
        $this->container['is_xml'] = $is_xml;

        return $this;
    }

    /**
     * Gets is_json
     *
     * @return bool
     */
    public function getIsJson()
    {
        return $this->container['is_json'];
    }

    /**
     * Sets is_json
     *
     * @param bool $is_json True if the input string is JSON, false otherwise
     *
     * @return $this
     */
    public function setIsJson($is_json)
    {
        $this->container['is_json'] = $is_json;

        return $this;
    }

    /**
     * Gets is_url
     *
     * @return bool
     */
    public function getIsUrl()
    {
        return $this->container['is_url'];
    }

    /**
     * Sets is_url
     *
     * @param bool $is_url True if the input string is a URL, false otherwise
     *
     * @return $this
     */
    public function setIsUrl($is_url)
    {
        $this->container['is_url'] = $is_url;

        return $this;
    }

    /**
     * Gets original_input
     *
     * @return string
     */
    public function getOriginalInput()
    {
        return $this->container['original_input'];
    }

    /**
     * Sets original_input
     *
     * @param string $original_input Original input string
     *
     * @return $this
     */
    public function setOriginalInput($original_input)
    {
        $this->container['original_input'] = $original_input;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


